// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_service.go

// Package shrd_mock_svc is a generated GoMock package.
package shrd_mock_svc

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileSvc is a mock of FileSvc interface.
type MockFileSvc struct {
	ctrl     *gomock.Controller
	recorder *MockFileSvcMockRecorder
}

// MockFileSvcMockRecorder is the mock recorder for MockFileSvc.
type MockFileSvcMockRecorder struct {
	mock *MockFileSvc
}

// NewMockFileSvc creates a new mock instance.
func NewMockFileSvc(ctrl *gomock.Controller) *MockFileSvc {
	mock := &MockFileSvc{ctrl: ctrl}
	mock.recorder = &MockFileSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSvc) EXPECT() *MockFileSvcMockRecorder {
	return m.recorder
}

// BuildPublicUrl mocks base method.
func (m *MockFileSvc) BuildPublicUrl(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPublicUrl", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPublicUrl indicates an expected call of BuildPublicUrl.
func (mr *MockFileSvcMockRecorder) BuildPublicUrl(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPublicUrl", reflect.TypeOf((*MockFileSvc)(nil).BuildPublicUrl), path)
}

// DeleteFile mocks base method.
func (m *MockFileSvc) DeleteFile(ctx context.Context, bucketName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucketName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileSvcMockRecorder) DeleteFile(ctx, bucketName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileSvc)(nil).DeleteFile), ctx, bucketName, path)
}

// GetPreSignUrl mocks base method.
func (m *MockFileSvc) GetPreSignUrl(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSignUrl", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSignUrl indicates an expected call of GetPreSignUrl.
func (mr *MockFileSvcMockRecorder) GetPreSignUrl(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSignUrl", reflect.TypeOf((*MockFileSvc)(nil).GetPreSignUrl), ctx, path)
}

// UploadPrivateFile mocks base method.
func (m *MockFileSvc) UploadPrivateFile(ctx context.Context, file multipart.File, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPrivateFile", ctx, file, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPrivateFile indicates an expected call of UploadPrivateFile.
func (mr *MockFileSvcMockRecorder) UploadPrivateFile(ctx, file, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPrivateFile", reflect.TypeOf((*MockFileSvc)(nil).UploadPrivateFile), ctx, file, path)
}

// UploadPublicFile mocks base method.
func (m *MockFileSvc) UploadPublicFile(ctx context.Context, file multipart.File, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPublicFile", ctx, file, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPublicFile indicates an expected call of UploadPublicFile.
func (mr *MockFileSvcMockRecorder) UploadPublicFile(ctx, file, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPublicFile", reflect.TypeOf((*MockFileSvc)(nil).UploadPublicFile), ctx, file, path)
}
