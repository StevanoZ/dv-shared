// Code generated by MockGen. DO NOT EDIT.
// Source: service/message_broker_service.go

// Package shrd_mock_svc is a generated GoMock package.
package shrd_mock_svc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageBrokerClient is a mock of MessageBrokerClient interface.
type MockMessageBrokerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerClientMockRecorder
}

// MockMessageBrokerClientMockRecorder is the mock recorder for MockMessageBrokerClient.
type MockMessageBrokerClientMockRecorder struct {
	mock *MockMessageBrokerClient
}

// NewMockMessageBrokerClient creates a new mock instance.
func NewMockMessageBrokerClient(ctrl *gomock.Controller) *MockMessageBrokerClient {
	mock := &MockMessageBrokerClient{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBrokerClient) EXPECT() *MockMessageBrokerClientMockRecorder {
	return m.recorder
}

// ListenEvent mocks base method.
func (m *MockMessageBrokerClient) ListenEvent(topic string, cb func(any, error, func())) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenEvent", topic, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenEvent indicates an expected call of ListenEvent.
func (mr *MockMessageBrokerClientMockRecorder) ListenEvent(topic, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvent", reflect.TypeOf((*MockMessageBrokerClient)(nil).ListenEvent), topic, cb)
}

// SendEvents mocks base method.
func (m *MockMessageBrokerClient) SendEvents(topic []string, key string, message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvents", topic, key, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvents indicates an expected call of SendEvents.
func (mr *MockMessageBrokerClientMockRecorder) SendEvents(topic, key, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvents", reflect.TypeOf((*MockMessageBrokerClient)(nil).SendEvents), topic, key, message)
}
